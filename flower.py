from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram import ReplyKeyboardMarkup, KeyboardButton
import sqlite3
import requests

from flower2 import TOKEN

FLOWERS = {
    "–†–æ–∑—ã": "https://rozmari05.ru/rozy/",
    "–¢—é–ª—å–ø–∞–Ω—ã": "https://rozmari05.ru/vesennie/tyulpany/",
    "–•—Ä–∏–∑–∞–Ω—Ç–µ–º—ã": "https://rozmari05.ru/hrizantemy/",
}

class CartManager:
    def __init__(self):
        self.conn = sqlite3.connect("flowers.db", check_same_thread=False)
        self.create_tables()

    def create_tables(self):
        cursor = self.conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS cart (
                user_id INTEGER,
                item TEXT
            )
        """)
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS log (
                user_id INTEGER,
                username TEXT,
                action TEXT
            )
        """)
        self.conn.commit()

    def log_action(self, user_id: int, username: str, action: str):
        cursor = self.conn.cursor()
        cursor.execute(
            "INSERT INTO log (user_id, username, action) VALUES (?, ?, ?)",
            (user_id, username, action))
        self.conn.commit()

    def add_cart(self, user_id: int, item: str):
        cursor = self.conn.cursor()
        cursor.execute("INSERT INTO cart VALUES (?, ?)", (user_id, item))
        self.conn.commit()

    def get_cart(self, user_id: int):
        cursor = self.conn.cursor()
        cursor.execute("SELECT item FROM cart WHERE user_id = ?", (user_id,))
        return cursor.fetchall()

    def clear_cart(self, user_id: int):
        cursor = self.conn.cursor()
        cursor.execute("DELETE FROM cart WHERE user_id = ?", (user_id,))
        self.conn.commit()

    def close(self):
        self.conn.close()

cart_db = CartManager()

def flower_info(flower_name):
    try:
        url = f"https://api.inaturalist.org/v1/search?q={flower_name}&sources=taxa"
        response = requests.get(url)
        data = response.json()

        flower = data['results'][0]['record']

        nazvanie = flower.get('preferred_common_name', flower.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
        description = flower.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
        if len(description) > 300:
            description = description[:299] + "..."

        photo = flower.get('default_photo', {}).get('medium_url')

        text = f"ü™ª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–≤–µ—Ç–∫–µ: {nazvanie}\n{description}"
        return text, photo

    except Exception as e:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–≤–µ—Ç–∫–µ", None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –†–æ–∑—ã")],
        [KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –¢—é–ª—å–ø–∞–Ω—ã")],
        [KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –•—Ä–∏–∑–∞–Ω—Ç–µ–º—ã")],
        [KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É")],
        [KeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")],
        [KeyboardButton("–ü–æ–∏—Å–∫ –ø–æ —Ü–≤–µ—Ç–∫—É")],
        [KeyboardButton("–ù–∞—à –∫–∞—Ç–∞–ª–æ–≥")],
        [KeyboardButton("–û –Ω–∞—Å")],
        [KeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã")],
        [KeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")]
    ]

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(" –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=reply_markup)

    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ü–≤–µ—Ç–æ—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω Rozmari.")
    await main_menu(update)

async def cart_view(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    items = cart_db.get_cart(user.id)
    if items:
        text = "–ö–æ—Ä–∑–∏–Ω–∞:\n" + "\n".join(f"- {item[0]}" for item in items)
    else:
        text = "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
    await update.message.reply_text(text)

async def clear_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    cart_db.clear_cart(user.id)
    await update.message.reply_text("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")

async def catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(name, url=url)] for name, url in FLOWERS.items()]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ö–∞—Ç–∞–ª–æ–≥ –±—É–∫–µ—Ç–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://rozmari05.ru/buket-czvetov/", reply_markup=reply_markup)

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = ("–ú—ã Rozmari, —Ü–≤–µ—Ç–æ—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω. –†–∞–±–æ—Ç–∞–µ–º –≤ –ú–∞—Ö–∞—á–∫–∞–ª–µ —Å 2015 –≥–æ–¥–∞.")
    await update.message.reply_text(text)

async def contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = ("–ù–∞—à –∞–¥—Ä–µ—Å: –≥. –ú–∞—Ö–∞—á–∫–∞–ª–∞, –ø—Ä. –ò–º–∞–º–∞-–®–∞–º–∏–ª—è, 4/1, —Ç–µ–ª: +7 (928) 555-55-55(–∫–æ–Ω—Ç–∞–∫—Ç —É—á–µ–±–Ω—ã–π)")
    await update.message.reply_text(text)

async def main_menu(update: Update):
    keyboard = [[InlineKeyboardButton(name, url=url)] for name, url in FLOWERS.items()]
    keyboard += [
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="view_cart")],
        [InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")],
        [InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ —Ü–≤–µ—Ç–∫—É", callback_data="help_name")],
        [InlineKeyboardButton("–ù–∞—à –∫–∞—Ç–∞–ª–æ–≥", callback_data="our_catalog")],
        [InlineKeyboardButton("–û –Ω–∞—Å", callback_data="about")],
        [InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")],
        [InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="otziv")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–µ—Ç:", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "view_cart":
        items = cart_db.get_cart(user_id)
        if items:
            cart_text = "\n".join(f"- {item[0]}" for item in items)
            await query.edit_message_text(f"–ö–æ—Ä–∑–∏–Ω–∞:\n{cart_text}")
        else:
            await query.edit_message_text("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")

    elif query.data == "clear_cart":
        cart_db.clear_cart(user_id)
        await query.edit_message_text("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")

    elif query.data == "help_name":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∫–∞, –∏ —è –ø—Ä–∏—à–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º!")

    elif query.data == "our_catalog":
        await query.edit_message_text("–ù–∞—à –∫–∞—Ç–∞–ª–æ–≥ –Ω–∞ —Å–∞–π—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://rozmari05.ru/buket-czvetov/")

    elif query.data == "about":
        await query.edit_message_text("–ú—ã Rozmari, —Ü–≤–µ—Ç–æ—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω. –†–∞–±–æ—Ç–∞–µ–º –≤ –ú–∞—Ö–∞—á–∫–∞–ª–µ —Å 2015 –≥–æ–¥–∞.")

    elif query.data == "contacts":
        await query.edit_message_text(
            "–ù–∞—à –∞–¥—Ä–µ—Å: –≥. –ú–∞—Ö–∞—á–∫–∞–ª–∞, –ø—Ä. –ò–º–∞–º–∞-–®–∞–º–∏–ª—è, 4/1, —Ç–µ–ª: +7 (928) 555-55-55(–∫–æ–Ω—Ç–∞–∫—Ç —É—á–µ–±–Ω—ã–π)")

    elif query.data == "otziv":
        await query.edit_message_text("–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤, –º—ã –µ–≥–æ —É—á—Ç–µ–º!")

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text.strip().lower()

    if text == "–¥–æ–±–∞–≤–∏—Ç—å —Ä–æ–∑—ã":
        cart_db.add_cart(user.id, "–†–æ–∑—ã")
        cart_db.log_action(user.id, user.username, "–î–æ–±–∞–≤–∏–ª(–∞) —Ä–æ–∑—ã –≤ –∫–æ—Ä–∑–∏–Ω—É")
        await update.message.reply_text("–†–æ–∑—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ—Ä–∑–∏–Ω—É")
        return

    elif text == "–¥–æ–±–∞–≤–∏—Ç—å —Ç—é–ª—å–ø–∞–Ω—ã":
        cart_db.add_cart(user.id, "–¢—é–ª—å–ø–∞–Ω—ã")
        cart_db.log_action(user.id, user.username, "–î–æ–±–∞–≤–∏–ª(–∞) —Ç—é–ª—å–ø–∞–Ω—ã –≤ –∫–æ—Ä–∑–∏–Ω—É")
        await update.message.reply_text("–¢—é–ª—å–ø–∞–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ—Ä–∑–∏–Ω—É")
        return

    elif text == "–¥–æ–±–∞–≤–∏—Ç—å —Ö—Ä–∏–∑–∞–Ω—Ç–µ–º—ã":
        cart_db.add_cart(user.id, "–•—Ä–∏–∑–∞–Ω—Ç–µ–º—ã")
        cart_db.log_action(user.id, user.username, "–î–æ–±–∞–≤–∏–ª(–∞) —Ö—Ä–∏–∑–∞–Ω—Ç–µ–º—ã –≤ –∫–æ—Ä–∑–∏–Ω—É")
        await update.message.reply_text("–•—Ä–∏–∑–∞–Ω—Ç–µ–º—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ—Ä–∑–∏–Ω—É")
        return

    if context.user_data.get("waiting_feedback"):
        context.user_data["waiting_feedback"] = False
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ú—ã –µ–≥–æ —É—á—Ç—ë–º.")
        return

    if text == "–æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É":
        cart_db.log_action(
            user_id=user.id,
            username=user.username,
            action="Clear cart")
        cart_db.clear_cart(user.id)
        await update.message.reply_text("üõí –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")

    elif text == "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É":
        cart_db.log_action(
            user_id=user.id,
            username=user.username or "unknown",
            action="View cart")
        items = cart_db.get_cart(user.id)
        if items:
            cart_items = "\n".join([f"‚Ä¢ {item[0]}" for item in items])
            response = f"üõçÔ∏è –ö–æ—Ä–∑–∏–Ω–∞:\n{cart_items}"
        else:
            response = "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
        await update.message.reply_text(response)

    elif text == "–Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥":
        await catalog(update, context)
        return

    elif text == "–æ –Ω–∞—Å":
        await about(update, context)
        return

    elif text == "–∫–æ–Ω—Ç–∞–∫—Ç—ã":
        await contacts(update, context)
        return

    elif text == "–ø–æ–∏—Å–∫ –ø–æ —Ü–≤–µ—Ç–∫—É":
        context.user_data["search_flower"] = True
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∫–∞:")
        return

    if context.user_data.get("search_flower"):
        context.user_data["search_flower"] = False
        description, image = flower_info(text)
        if image:
            await update.message.reply_photo(photo=image, caption=description, parse_mode="Markdown")
        else:
            await update.message.reply_text(description)
        return

    await update.message.reply_text("–ß—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º —Ñ–ª–æ—Ä–∏—Å—Ç–æ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ –Ω–æ–º–µ—Ä—É, —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤ –Ω–∞—à–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö")

async def handle_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    cart_db.clear_cart(user.id)
    await update.message.reply_text("–ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞")

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    try:
        app.run_polling()
    finally:
        cart_db.close()

if __name__ == "__main__":
    main()